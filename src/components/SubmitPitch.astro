---
import PitchSubmitButton from './SubmitButtons/PitchSubmitButton.astro';
import ZoneSubmitButton from './SubmitButtons/ZoneSubmitButton.astro';
import SpeedSubmitButton from './SubmitButtons/SpeedSubmitButton.astro';
import DynamicSubmitButton from './SubmitButtons/DynamicSubmitButton.astro'
import HandSubmitButton from './SubmitButtons/HandSubmitButton.astro'

const dynamicZone = [2,3,4,5,6,7,8,9,10];
const pitchOptions = [12,2,3,4,5,6,7,8,9,10];


export interface Props {
    title: string; 
}

const input_field = ['Pitch', 'Speed','Zone', 'Delay' ]
const {title, button} = Astro.props;

---
<div class="add-Pitch">
    
    <h3>{title}</h3>
    <div> 
        
    </div>
    <div class="sub-box">
        
        <div class="grid">
            <div>
                HAND
                <div class="div-content Hand">
                    <div id="hand">
                        <HandSubmitButton title="Pitcher's Hand" sport="Baseball"  />
                    </div>
                </div>
            </div>
            <div>
                ZONE
                <div class="div-content zone">
                    <div id="zone">
                        <ZoneSubmitButton title="Zone" sport="Baseball" />
                    </div>
                </div>
            </div>
            <div>
                SPEED
                <div class="div-content speed">
                    <div id="speed">
                        <SpeedSubmitButton title="Speed" sport="Baseball" />
                    </div>
                </div>
            </div>
            <div>
                PITCH
                <div class="div-content Pitch">
                    <div id="pitch">
                        <PitchSubmitButton title="Pitch" sport="Baseball"  />
                    </div>
                </div>
            </div>
            <div>
                DELAY
                <div class="div-content Pitch">
                    <div id="delay">
                        <DynamicSubmitButton array={dynamicZone} title="Pitch Delay in Seconds" sport="Baseball"  />
                    </div>
                </div>
            </div>
            <div>
                ADD PITCH
                <div class="div-content Add">
                    <div class="btn" id="btn1">
                        +
                    </div>
                </div>
            </div>
        </div>
    </div>
    
</div>

<div class="table-body" id="dataTable">
    <table border="blue">
        <thead>
            <tr>
                <th>P. No.</th>
                <th>Hand</th>
                <th>Zone</th>
                <th>Speed</th>
                <th>Pitch</th>
                <th>Delay</th>
                <th>Remove</th>
            </tr>
        </thead>
        <tbody>

        </tbody>
    </table>
    <h3 id="no-data">No Data Available...</h3>
    <button id="btnExportToCsv" type="button" class="button-export">EXPORT FILE</button>
</div>



<script >
import {rightHandClockPositions, fastballSpeeds, RIGHT, FASTBALL, leftHandClockPositions, offspeedSpeeds, crossoverSwitch
, LEFT } from "../scripts/PitchSelect.js"

import { handSelection } from "../scripts/SpeedSelection.js";

var hand = [];
var pitch = []; 
var speed = []; 
var zone = []; 
var index = [];
var delay = []
var c = 1;

var button = document.querySelector('#btn1');

button.addEventListener('click', ()=>{
    addToTable()
    removeTableRow()
})


function addToTable(){
    
    document.getElementById('no-data').style.display="none";
    
    var checkpitchRightHand = document.getElementsByClassName('select-hand')[0]
    var checkpitchLeftHand = document.getElementsByClassName('select-hand')[1]
    console.log(checkpitchLeftHand,checkpitchRightHand)
    
    var checkLeft = checkpitchLeftHand.classList.contains('active')
    var checkRight = checkpitchRightHand.classList.contains('active') 
    
    console.log(checkLeft,checkRight)
    
    if(checkLeft == false && checkRight == false){
        alert('Please Select Handedness in the Pitch Section')
    }

    var pitchHand = document.getElementsByClassName('select-hand active')[0].textContent
    
    var pitchSubmission = document.getElementById('pitch').innerText;
    var pitchFilter = pitchSubmission.indexOf('\n')
    var pitchSlice = pitchSubmission.slice(0,pitchFilter)
    if( pitchSlice == 'Please Select Pitch'){
        pitchSlice = FASTBALL
    }
    
    var speedSubmission = parseInt(document.getElementById('speed').innerText);
    var zoneSubmission= parseInt(document.getElementById('zone').innerText);
    var delaySubmission= parseInt(document.getElementById('delay').innerText);

    
    if(pitchSubmission && speedSubmission && zoneSubmission && pitchHand && delaySubmission){
        hand = [...hand, pitchHand];
        pitch = [...pitch,pitchSlice];
        speed = [...speed,speedSubmission];
        zone = [...zone,zoneSubmission];
        delay = [...delay,delaySubmission]
        index = [...index,c];
        displayTable();
    }
    else{
        alert("incomplete data");
    }
}

function displayTable(){
    const length= pitch.length;
    
    var tr= document.createElement('tr');
    tr.classList.add('table-option')
    
    for(var i=0;i<length;i++){
        tr.id = `row-${i}`
        tr.innerHTML ='';
        var td1 = document.createElement('td');
        td1.innerHTML = index[i];
        tr.appendChild(td1);
        
        var td7= document.createElement('td')
        td7.innerHTML = hand[i]
        tr.appendChild(td7)
        
        var td2 = document.createElement('td');
        td2.innerHTML = zone[i];
        tr.appendChild(td2);
        
        var td3 = document.createElement('td');
        td3.innerHTML = speed[i];
        tr.appendChild(td3);
        
        var td4 = document.createElement('td');
        td4.innerHTML = pitch[i];
        tr.appendChild(td4);
        
        var td5 = document.createElement('td')
        td5.innerHTML = delay[i]
        tr.appendChild(td5)
        
        var td6 = document.createElement('td')
        td6.innerHTML = `<button id="remove-${i}""> X </button>`
        td6.classList.add('remove')
        td6.style.backgroundColor = 'gray'
        tr.appendChild(td6)


        document.getElementsByTagName('tbody')[0].appendChild(tr);
    }
    c++;
    
}

const removeTableRow = () => {
    const tableBody = document.querySelectorAll('.table-option')
    tableBody.forEach(tableRow => tableRow.lastChild.addEventListener('click', event=>{
            const cell = document.getElementById(`${event.target.id}`)
            if(cell == null) return
            var row = cell.parentElement.parentElement
            row.remove()  
        }))
}

const dataTable = document.getElementById("dataTable");
const btnExportToCsv = document.getElementById("btnExportToCsv");

btnExportToCsv.addEventListener("click", () => {
            const exporter = new TableCSVExporter(dataTable);

            const csvOutput = exporter.convertToCSV();
            const filteredOutput = filterCSV(csvOutput, rightHandClockPositions);
            console.log(filteredOutput)
            const csvBlob = new Blob([filteredOutput], { type: "text/csv" });
            const blobUrl = URL.createObjectURL(csvBlob);
            const anchorElement = document.createElement("a");

            anchorElement.href = blobUrl;
            anchorElement.download = "table-export.csv";
            anchorElement.click();
            
            setTimeout(() => {
                URL.revokeObjectURL(blobUrl);
            }, 500);
        });



const isArray = (value) => {
    if(value === null) return false
    return (typeof value ==='object')
}
const objectProps = (object, pitch) => {
    
    //let speedCheck = checkSpeed(object[3])
    //let clockPositions = convertClockPositions(rightHandClockPositions, object[0])

    let speedFilter = crossoverSwitch(object[3], FASTBALL, offspeedSpeeds, fastballSpeeds)
    let clockFilter = crossoverSwitch(object[0], RIGHT, leftHandClockPositions, rightHandClockPositions)

    for(let value in object ){
        if (isArray(object[value])){
            objectProps(object[value],pitch) 
        } else {
            if(clockFilter.has(object[value]) ){
                object[value] = clockFilter.get(object[value])               
            }
            if(speedFilter.has(object[value])){
                object[value] = speedFilter.get(object[value])
            } 
        }
    }

    return object
}

const filterCSV = (csv, pitch) =>{
    let filteredString = csv.replace('Pitch', 'Deflector Position')
    let row = csv.replace('Pitch', 'Deflector Position').split('\n')
    let arrayCsv = []
    for( let i= 0; i < row.length;i++){
        let cells = row[i].split(',')
        arrayCsv.push(cells)   
    }
   let newArray = objectProps(arrayCsv,pitch)
   console.log(newArray)
   let newNewArray = []

   newArray.forEach( element => {
    newNewArray = [...newNewArray,element.slice(1)]
    console.log(element)}
   )
    console.log('NEWNEW',newNewArray)
    let myPeople = newNewArray.join('\n')
    console.log(myPeople)
   
    return myPeople
}

class TableCSVExporter {
    constructor (table, includeHeaders = true) {
        this.table = table;
        this.rows = Array.from(table.querySelectorAll("tr"));

        if (!includeHeaders && this.rows[0].querySelectorAll("th").length) {
            this.rows.shift();
        }
    }

    convertToCSV () {
        const lines = [];
        const numCols = this._findLongestRowLength();

        for (const row of this.rows) {
            let line = "";

            for (let i = 1; i < numCols-1; i++) {
                if (row.children[i] !== undefined) {
                    line += TableCSVExporter.parseCell(row.children[i]);
                }

                line += (i !== (numCols - 2)) ? "," : "";
            }

            lines.push(line);
        }

        return lines.join("\n");
    }

    _findLongestRowLength () {
        return this.rows.reduce((l, row) => row.childElementCount > l ? row.childElementCount : l, 0);
    }

    static parseCell (tableCell) {
        let parsedValue = tableCell.textContent;

        // Replace all double quotes with two double quotes
        parsedValue = parsedValue.replace(/"/g, `""`);

        // If value contains comma, new-line or double-quote, enclose in double quotes
        parsedValue = /[",\n]/.test(parsedValue) ? `"${parsedValue}"` : parsedValue;

        return parsedValue;
    }
}




</script>


<style>
h3 {
    display: flex;
    justify-content: center;
}
.parent{
    display: grid;
    grid-template-columns: 1fr 2fr 1fr;
    min-height: 100vh;
}
.add-subject{
    background: rgb(223, 238, 243);
    text-transform: capitalize;
    position: relative;
}
.title{
    background: darkslategray;
    color: whitesmoke;
    margin-top: 0;
    padding: 0.5rem 0;
}

.grid{
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: minmax(200px);
    column-gap: 5%;
    row-gap: 5%;
    justify-items: center;
    text-align: center;
    
}


.sub-box{
    text-align: center;
    padding: 0.5rem 1rem;
}
input{
    font-size: 1.1rem;
    border-radius: 0.3rem;
    margin: 0.5rem 0;
    padding: 0.3rem 0.8rem;
    border: none;
    background: white;
    color: teal;
}
input:focus{
    outline: none;
    background: whitesmoke;
}


.div-content{
    grid-row: inherit;
  
}



.table-body{
    padding-top: 5rem;
    text-align: center;
    
}
.button{
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 1rem;
    background: cornflowerblue;
    color: whitesmoke;
    outline: none;
    position: sticky;

}
.button-export{
    
    justify-content: center;
    align-items: center;
    background: cornflowerblue;
    height: 3.2rem;
    background-position: 100%;
    color: black;
    padding: 1rem;
    font-weight: bold;
    border-radius: .3rem;
    border: #f1f1f1;
    transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);

}
.button-export:hover{
    background: #5384ce;
}
.button-export:active{
    background: cadetblue; 
}
.button:active{
    background: cadetblue;
}
.btn{
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 1rem;
    background: cornflowerblue;
    color: whitesmoke;
    outline: none;
}
.btn:active{
    background: cadetblue;
}


.table-body table{
    width: 100%;
    color: dimgray;
    border-collapse: collapse;
    font-size: 1.3rem;
}
table{
    padding: 2%;
    text-transform: capitalize;
    width: 100%;
}
td,th{
    padding: 0.2rem 0;
    text-transform: capitalize;
}
button{
    margin: .5rem;
    padding: 2rem;
}


.grade-system{
    background: rgb(252,231,234);
    text-align: center;
}
.grade-body table{
    width: 100%;
    margin-top: 5rem;
    border-collapse: collapse;
    font-size: 1.2rem;
    color: darkslategrey;

}
.grade-body table td{
    border: none;
    padding: 0.5rem;
}
.grade-body table tr:nth-child(even){
    background: dimgray;
    color: whitesmoke;
}

</style>
