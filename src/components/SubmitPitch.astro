---
import PitchSubmitButton from './SubmitButtons/PitchSubmitButton.astro';
import ZoneSubmitButton from './SubmitButtons/ZoneSubmitButton.astro';
import SpeedSubmitButton from './SubmitButtons/SpeedSubmitButton.astro';


export interface Props {
    title: string; 
}

const input_field = ['Pitch', 'Speed','Zone', 'Delay' ]
const {title, button} = Astro.props;

---
<div class="add-Pitch">
    
    <h3>{title}</h3>
    <div class="sub-box">
        
        
        <table>
            <tr>

           <td>

               <div class="div-content"> 
                   <label> Choose Pitch.. </label>
                   <div id="pitch">
                       <PitchSubmitButton title="Pitch" sport="Baseball" />
                    </div>
                </div>
            </td>
            <td>
                <div class="div-content"> 
                    <label> Choose Speed.. </label>
                    <div id="speed">
                        <SpeedSubmitButton title="Speed" sport="Baseball" />
                    </div>
                </div>
            </td>
            <td>
                <div class="div-content"> 
                    <label> Choose Zone.. </label>
                    <div id="zone">
                        <ZoneSubmitButton title="Zone" sport="Baseball" />
                    </div>
                </div>
            </td>
            <td>
                <label> Add Pitch..</label>
                <button id="btn1" class="btn" >+</button>
            </td>
            </tr>
        </table>
        
        <!--

            <input type="text" id="pitch" name="pitch" value="" placeholder="Enter Pitch 0-10...">
            <input type="text" id="speed" name="speed" value="" placeholder="Enter Speed 25-65...">
            <input type="text" id="zone" name="zone" value="" placeholder="Enter Zone 1-9...">
        -->
 
    </div>
    
</div>

<div class="table-body" id="dataTable">
    <table border="blue">
        <thead>
            <tr>
                <th>P. No.</th>
                <th>Pitch</th>
                <th>Speed</th>
                <th>Zone</th>
            </tr>
        </thead>
        <tbody>

        </tbody>
    </table>
    <h3 id="no-data">No Data Available...</h3>
    <button id="btnExportToCsv" type="button" class="button-export">EXPORT FILE</button>
</div>



<script >
var pitch = []; 
var speed = []; 
var zone = []; 
var index = [];
var c = 1;

var button = document.querySelector('#btn1');
//var button2 = document.querySelector('#btn2');

button.addEventListener('click', addToTable)


function createCSVFile(pitch_list,speed_list,zone_list){
    var Sequence = []
    var length = pitch_list.length

    for(var i=0;i<length;i++){
        Sequence.push(pitch_list[i],
        speed_list[i],
        zone_list[i] )
    }

    console.log(Sequence)

    
}


function addToTable(){
    
    document.getElementById('no-data').style.display="none";

    var pitchSubmission = parseInt(document.getElementById('pitch').innerText);
    var speedSubmission = parseInt(document.getElementById('speed').innerText);
    var zoneSubmission= parseInt(document.getElementById('zone').innerText);
    
    console.table([pitchSubmission,speedSubmission,zoneSubmission]);
    
    if(pitchSubmission && speedSubmission && zoneSubmission){
        pitch= [...pitch,pitchSubmission];
        speed= [...speed,speedSubmission];
        zone= [...zone,zoneSubmission];
        index= [...index,c];



        displayTable();
    }
    else{
        alert("incomplete data");
    }
}

function displayTable(){
    const length= pitch.length;
    
    var tr= document.createElement('tr');

    for(var i=0;i<length;i++){
        tr.innerHTML='';
        var td1= document.createElement('td');
        td1.innerHTML= index[i];
        tr.appendChild(td1);

        var td2= document.createElement('td');
        td2.innerHTML= pitch[i];
        tr.appendChild(td2);

        var td3= document.createElement('td');
        td3.innerHTML= speed[i];
        tr.appendChild(td3);

        var td4= document.createElement('td');
        td4.innerHTML= zone[i];
        tr.appendChild(td4);

        document.getElementsByTagName('tbody')[1].appendChild(tr);
    }
    c++;
    /*document.getElementById('pitch').textContent='';
    document.getElementById('speed').textContent='';
    document.getElementById('zone').textContent='';*/
}

const dataTable = document.getElementById("dataTable");
        const btnExportToCsv = document.getElementById("btnExportToCsv");

        btnExportToCsv.addEventListener("click", () => {
            const exporter = new TableCSVExporter(dataTable);
            const csvOutput = exporter.convertToCSV();
            const csvBlob = new Blob([csvOutput], { type: "text/csv" });
            const blobUrl = URL.createObjectURL(csvBlob);
            const anchorElement = document.createElement("a");

            anchorElement.href = blobUrl;
            anchorElement.download = "table-export.csv";
            anchorElement.click();

            setTimeout(() => {
                URL.revokeObjectURL(blobUrl);
            }, 500);
        });

class TableCSVExporter {
    constructor (table, includeHeaders = true) {
        this.table = table;
        this.rows = Array.from(table.querySelectorAll("tr"));

        if (!includeHeaders && this.rows[0].querySelectorAll("th").length) {
            this.rows.shift();
        }
    }

    convertToCSV () {
        const lines = [];
        const numCols = this._findLongestRowLength();

        for (const row of this.rows) {
            let line = "";

            for (let i = 0; i < numCols; i++) {
                if (row.children[i] !== undefined) {
                    line += TableCSVExporter.parseCell(row.children[i]);
                }

                line += (i !== (numCols - 1)) ? "," : "";
            }

            lines.push(line);
        }

        return lines.join("\n");
    }

    _findLongestRowLength () {
        return this.rows.reduce((l, row) => row.childElementCount > l ? row.childElementCount : l, 0);
    }

    static parseCell (tableCell) {
        let parsedValue = tableCell.textContent;

        // Replace all double quotes with two double quotes
        parsedValue = parsedValue.replace(/"/g, `""`);

        // If value contains comma, new-line or double-quote, enclose in double quotes
        parsedValue = /[",\n]/.test(parsedValue) ? `"${parsedValue}"` : parsedValue;

        return parsedValue;
    }
}




</script>


<style>

.parent{
    display: grid;
    grid-template-columns: 1fr 2fr 1fr;
    min-height: 100vh;
}
.add-subject{
    background: rgb(223, 238, 243);
    text-transform: capitalize;
    position: relative;
}
.title{
    background: darkslategray;
    color: whitesmoke;
    margin-top: 0;
    padding: 0.5rem 0;
}



.sub-box{
    text-align: center;
    padding: 0.5rem 1rem;
}
input{
    font-size: 1.1rem;
    border-radius: 0.3rem;
    margin: 0.5rem 0;
    padding: 0.3rem 0.8rem;
    border: none;
    background: white;
    color: teal;
}
input:focus{
    outline: none;
    background: whitesmoke;
}


.div-content{
    
    

}
label {
    margin-bottom: 10pc;
}

.table-body{
    padding: 1rem 2rem;
    text-align: center;
    overflow: hidden;
    overflow-y: auto;
}
.button{
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 1rem;
    background: cornflowerblue;
    color: whitesmoke;
    outline: none;
}
.button-export{
    display:flex;
    justify-content: center;
    background: cornflowerblue;
    height: 3.2rem;
    background-position: 100%;
    color: black;
    padding: 1rem;
    font-weight: bold;
    border-radius: .3rem;
    border: #f1f1f1;
    transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);

}
.button-export:hover{
    background: #5384ce;
}
.button-export:active{
    background: cadetblue; 
}
.button:active{
    background: cadetblue;
}
.btn{
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 1rem;
    background: cornflowerblue;
    color: whitesmoke;
    outline: none;
}
.btn:active{
    background: cadetblue;
}
#btn1, #btn2, #button{
    margin-top: 2rem;
}
#btn3{
    margin-top: 0.5rem;
    color: whitesmoke;
    background: lightgray;
}
.table-body table{
    width: 100%;
    color: dimgray;
    border-collapse: collapse;
    font-size: 1.3rem;
}
table{
    padding: 2%;
    text-transform: capitalize;
    width: 100%;
}
td,th{
    padding: 0.2rem 0;
    text-transform: capitalize;
}
button{
    margin: .5rem;
    padding: 2rem;
}


.grade-system{
    background: rgb(252,231,234);
    text-align: center;
}
.grade-body table{
    width: 100%;
    margin-top: 5rem;
    border-collapse: collapse;
    font-size: 1.2rem;
    color: darkslategrey;

}
.grade-body table td{
    border: none;
    padding: 0.5rem;
}
.grade-body table tr:nth-child(even){
    background: dimgray;
    color: whitesmoke;
}

</style>
