---

const pitch = [0,2,3,4,5,6,7,8,9,10]; 
const speed = [25,30,35,40,45,50,55,60,65]; 
const zone = [1,2,3,4,5,6,7,8,9]; 
const input_field = ['Pitch', 'Speed','Zone', 'Delay' ]
const {title, button} = Astro.props;
---

<div class="select-group">
    <label for="button"> What Zone would you like? </label>
    <button class="button" id="zone-button">
        <span id="select-label-zone">Please Select Zone</span>
    <div class="arrow"></div>
    </button>
    
    <div id="drop-down-zone" class="drop-down hidden-zone">
        { zone.map(select => 
            <label class="select-item-zone" for={`"select-item-${select}"`}> {select}</label>
            <input class="option-zone" id={`"select-item-${select}"`} type="radio" />
        )}
    </div>
</div>

<script>
    

    
    const button = document.querySelector('#button')
    const zonebutton = document.querySelector('#zone-button')


    const select = document.querySelector('#drop-down')
    const selectZone = document.querySelector('#drop-down-zone')


    const options = document.querySelectorAll('.option')
    const zoneoptions = document.querySelectorAll('.select-item-zone')
    
    
    const selectLabel = document.querySelector('#select-label')
    const selectLabelZone = document.querySelector('#select-label-zone')

    zonebutton.addEventListener('click', function(event){
        event.preventDefault()
        toggleHiddenZone()
    })

    button.addEventListener('click', function(event){
        event.preventDefault()
        toggleHidden()

    })
    function toggleHiddenZone(){
        selectZone.classList.toggle('hidden-zone')
    }
    function toggleHidden(){
        select.classList.toggle('hidden')
    }

    console.log(zoneoptions)
    zoneoptions.forEach(function(option){

       
        console.log(option.textContent)
        option.addEventListener('click',
        function(event){
            setSelectZoneTitle(event)            
        })
    })
    function setSelectZoneTitle(event){
        const labelElement = document.querySelector(`label[for="select-item-4"]`)
        const inputElement = document.querySelector(`input[class="${event}"`)

        console.log(labelElement, inputElement)
        selectLabelZone.innerText = labelElement;
        toggleHiddenZone()
    }
    
    options.forEach(function(option){
        option.addEventListener('click',
        function(event){
            setSelectTitle(event)            
        })
    })
    function setSelectTitle(event){
        const labelElement = document.querySelector(`label[for="${event.target.id}"]`).innerText
        console.log(labelElement)
        selectLabel.innerText = labelElement;
        toggleHidden()
    }

</script>



<style>

    label{
        display: block;
        padding: 2rem 0 0.5rem;
    }
    .select-group{
        position: relative;
    }
    .button{
        display: flex;
        width: 100%;
        height: 3.2rem;
        background-color: white;
        background-position: 100%;
        color: black;
        padding: 1rem;
        justify-content: space-between;
        font-weight: bold;
        border-radius: .3rem;
        border: #f1f1f1;
        transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
    }
    .arrow{
        border: solid black;
        border-width: 0px 2px 2px 0px;
        padding: 4px;
        transform: rotate(45deg);
    }
    .option{
        display: none;
    }
    .option-zone{
        display: none;
    }
    .drop-down{
        border: 2px solid #3e8e41;
        border-radius: .3rem;
        position: absolute;
        width: 100%;
        box-sizing: border-box;

    }
    .select-item{
        background-color: white;
        padding: 1rem;
        color: black;
    }
    .select-item:hover{
        background-color: #ecd2ff;
    }
    .select-item-zone{
        background-color: white;
        padding: 1rem;
        color: black;
    }
    .select-item-zone:hover{
        background-color: #ecd2ff;
    }

    .hidden{
        display: none;
    }
    .hidden-zone{
        display: none;
    }
    .section{
        list-style: none;
		display: flex;
		padding: 0.25rem;
		background-color: white;
		background-image: none;
		background-size: 400%;
		border-radius: 0.6rem;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
    }
 
    h2 {
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}
	p {
		margin-top: 0.5rem;
		margin-bottom: 0;
		color: #444;
	}
	.button:is(:hover, :focus-within) {
		background-position: 0;
		background-image: var(--accent-gradient);
	}
	.button:is(:hover, :focus-within) h2 {
		color: rgb(var(--accent));
	}
	
    .dropbtn {
        background-color: #4CAF50;
        color: white;
        padding: 16px;
        font-size: 16px;
        border: none;
        cursor: pointer;
      }
      
      /* The container <div> - needed to position the dropdown content */
    .dropdown {
        position: relative;
      }
      
      /* Dropdown Content (Hidden by Default) */
    .dropdown-content {
        display: none;
        position: absolute;
        background-color: #f9f9f9;
        min-width: 160px;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1;
      }
    
      
      /* Links inside the dropdown */
    .dropdown-content a {
        color: black;
        padding: 12px 16px;
        text-decoration: none;
        display: block;
      }
      
      /* Change color of dropdown links on hover */
    .dropdown-content a:hover {background-color: #f1f1f1}
      
      /* Show the dropdown menu on hover */
    .dropdown:hover .dropdown-content {
        display: block;
      }
      
      /* Change the background color of the dropdown button when the dropdown content is shown */
    .dropdown:hover .dropbtn {
        background-color: #3e8e41;
      }
</style>
