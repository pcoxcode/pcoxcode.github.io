---

const {title, sport} = Astro.props;

export interface Props {
    title: string;
    sport: string; 
}

---


<div class="select-group">
    
    <button class="button" id="button-zone">
        <span id="select-label-zone"> {title}</span>

    </button>
    <div class="grid-buttons">

    <div class="grid-row">
        <div class="grid-cell option-zone" id="select-zone-1">
            1
        </div>
        <div class="grid-cell option-zone" id="select-zone-2">
            2
        </div>
        <div class="grid-cell option-zone"id="select-zone-3">
            3
        </div>
    </div>
    <div class="grid-row">
        <div class="grid-cell option-zone"id="select-zone-4">
            4
        </div>
        <div class="grid-cell option-zone"id="select-zone-5">
            5
        </div>
        <div class="grid-cell option-zone"id="select-zone-6">
            6
        </div>
    </div>
    <div class="grid-row">
        <div class="grid-cell option-zone"id="select-zone-7">
            7
        </div>
        <div class="grid-cell option-zone"id="select-zone-8">
           8
        </div>
        <div class="grid-cell option-zone"id="select-zone-9">
            9
        </div>
    </div>
    </div>

</div>

<script>
    import * as PitchSelect  from "../../scripts/PitchSelect.js"
    const zoneOptions = document.querySelectorAll('.option-zone')
    const selectLabelZone = document.querySelector('#select-label-zone')

    zoneOptions.forEach(zone => PitchSelect.selectOptions(zoneOptions,zone))
    
    zoneOptions.forEach(function(option){
        option.addEventListener('click',
        function(event){
            setSelectTitleZone(event)            
        })
    })
    function setSelectTitleZone(event){
        const divElement = document.querySelector(`div[id="${event.target.id}"]`).innerText
        selectLabelZone.innerText = divElement
    }

</script>

<style>

    label{
        display: block;
        padding: 1rem 0 0.5rem;
    }
    .select-group{
        position: relative;
    }


    .option-zone{
        display: none;
    }

    .drop-down{
        border: 2px solid #3e8e41;
        border-radius: .3rem;
        position: absolute;
        width: 100%;
        box-sizing: border-box;

    }
    .select-item{
        background-color: white;
        padding: 1rem;
        color: black;
    }
    .select-item:hover{
        background-color: #ecd2ff;
    }
    .hidden-zone{
        display: none;
    }

    .section{
        list-style: none;
		display: flex;
		padding: 0.5rem;
		background-color: white;
		background-image: none;
		background-size: 400%;
		border-radius: 0.6rem;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
    }
 
    h2 {
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}
	p {
		margin-top: 0.5rem;
		margin-bottom: 0;
		color: #444;
	}
	.button:is(:hover, :focus-within) {
		background-position: 0;
		background-image: var(--accent-gradient);
	}
	.button:is(:hover, :focus-within) h2 {
		color: rgb(var(--accent));
	}
	
    .dropdown {
        position: relative;
      }
    .grid-cell{
        grid-row: inherit;
        list-style: none;
        display: block;
        padding: 1rem 0 0.5rem;
		background-color: white;
		background-image: none;
		background-size: 50%;
		border-radius: 0.6rem;
		background-position: 50%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
    } 
   .grid-buttons{
        margin-top: 5%;
   }
   .active{
        background-color: #3e8e41;
    }
    .grid-row{
    
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows:  .2fr .2fr;
    column-gap: 5%;
    row-gap:5%;} 
    .grid-cell:hover{
        background-color: #ecd2ff; 
		box-shadow: 0 2px 3px -1px rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1);
    }

</style>
