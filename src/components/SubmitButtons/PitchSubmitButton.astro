---
const SELECT_ITEM ='select-item'
const CHANGEUP =  'Change-up'
        
        

export interface Props {
    title: string;
    sport: string; 
}

const {title, sport} = Astro.props;
---


<div class="select-group">
    <button class="button" id="button">
        <span id="select-label-pitch">  Please Select {title}</span>
    </button>
    
    <div id="drop-down" class="drop-down hidden-pitch">
        <label class={SELECT_ITEM} for="select-pitch-12">12</label>
        <input class="option-pitch" id="select-pitch-12" type="radio" name="pitch" value="pitch-12">
        <label class={SELECT_ITEM} for="select-pitch-2">2</label>
        <input class="option-pitch" id="select-pitch-2" type="radio" name="pitch" value="pitch-2">
        <label class="select-item" for="select-pitch-3">3</label>
        <input class="option-pitch" id="select-pitch-3" type="radio" name="pitch" value="pitch-3">
        <label class="select-item" for="select-pitch-4">4</label>
        <input class="option-pitch" id="select-pitch-4" type="radio" name="pitch" value="pitch-4">
        <label class="select-item" for="select-pitch-5">5</label>
        <input class="option-pitch" id="select-pitch-5" type="radio" name="pitch" value="pitch-5">
        <label class="select-item" for="select-pitch-6">6</label>
        <input class="option-pitch" id="select-pitch-6" type="radio" name="pitch" value="pitch-6">
        <label class="select-item" for="select-pitch-7">7</label>
        <input class="option-pitch" id="select-pitch-7" type="radio" name="pitch" value="pitch-7">
        <label class="select-item" for="select-pitch-8">8</label>
        <input class="option-pitch" id="select-pitch-8" type="radio" name="pitch" value="pitch-8">

        <label class="select-item" for="select-pitch-10">10</label>
        <input class="option-pitch" id="select-pitch-10" type="radio" name="pitch" value="pitch-10">
    </div>
</div>

<div class="grid-pitches">   
    <div class="select-hand" data-pitch="Right">Right</div>
    <div class="select-hand" data-pitch="Left">Left</div>
    <div id="Fastball" class="pitch-cell option-pitch" data-pitch="Fastball">Fastball</div>
    <div id="Slider" class="pitch-cell option-pitch" data-pitch="Slider">Slider</div>
    <div id={CHANGEUP}class="pitch-cell option-pitch" data-pitch="Change-up">Change Up</div>
    <div id="Curve" class="pitch-cell option-pitch" data-pitch="Curve">Curve</div>
    <div id="Spliter" class="pitch-cell option-pitch" data-pitch="Spliter">Split Finger</div>
    <div id="TweleveSixCurve" class="pitch-cell option-pitch" data-pitch="12-6Curve">12-6 Curve</div>
    
</div>

<script>
    const ACTIVE = 'active'
    const CLICK = 'click'
    const TOGGLE_CLASS = 'hidden-pitch'
    const FASTBALL =  'Fastball'
    const SLIDER =  'Slider'
    const CHANGEUP =  'Change-up'
    const CURVE =  'Curve'
    const SPLITER =  'Spliter'
    const TWELVESIXCURVE =  '12-6 Curve'
    const RIGHT = 'Right'
    const LEFT = 'Left'

    const pitchSelect = document.querySelectorAll('.pitch-cell');
    const select = document.querySelector(CHANGEUP)
    const button = document.querySelector('#button')
    const pitchOptions = document.querySelectorAll('.option-pitch')
    const selectLabel = document.querySelector('#select-label-pitch')
    const selectHandedness = document.querySelectorAll('.select-hand')
    
    const righthandClockPositions = new Map ([
            [ FASTBALL, 12], 
            [ SLIDER, 3],
            [ CHANGEUP, 8],
            [ CURVE, 5],
            [ SPLITER, 6],
            [ TWELVESIXCURVE, 6 ]]
    )

    const convertClockPositions = (pitchObject) => {
        const activeClass = document.querySelector('.select-hand.active')
        if(activeClass==null)return
        const hand = activeClass.innerText
        console.log(hand)
        if(hand == LEFT) {
            pitchObject.set(SLIDER, 9)
            pitchObject.set(CHANGEUP, 4)
            pitchObject.set(CURVE, 7)
        } 
        if (hand == RIGHT){
            pitchObject.set(SLIDER, 3)
            pitchObject.set(CHANGEUP, 8)
            pitchObject.set(CURVE, 5)
        }
        return pitchObject
    }

    const selectOptions = (array, select) => {
        select.addEventListener(CLICK, ()=> {
            array.forEach(selection => selection.classList.remove(ACTIVE))
            select.classList.add(ACTIVE); 
            console.log(select.innerText)
        })}
        
    const toggleHidden = () => select.classList.toggle(TOGGLE_CLASS)
        
    const setSelectTitle = (event: Event) => {
        //const labelElement = document.querySelector(`label[for="${event.target.id}"]`).innerText
        const divElement = document.querySelector(`div[id="${event.target.id}"]`).textContent
        selectLabel.innerText = divElement
       
       // console.log(labelElement)
        }
        
    pitchSelect.forEach(pitch => selectOptions(pitchSelect,pitch))
    selectHandedness.forEach(hand => selectOptions(selectHandedness,hand))

    button.addEventListener(CLICK, function(event){
        event.preventDefault()
        
        })

    pitchOptions.forEach(option => {
        option.addEventListener(CLICK, event => {
            const handselect = convertClockPositions(righthandClockPositions)
            console.log(handselect)
            setSelectTitle(event)}
            )
        })
        
</script>

<style>

    label{
        display: flex;
        padding: 2rem 0 0.5rem;
    }
    .select-group{
        position: relative;
    }


    .option-pitch{
        display: none;
    }

    .drop-down{
        border: 2px solid #3e8e41;
        border-radius: .3rem;
        position: absolute;
        width: 100%;
        box-sizing: border-box;

    }
    .select-item{
        background-color: white;
        padding: 1rem;
        color: black;
    }
    .select-item:hover{
        background-color: #ecd2ff;
    }
    .hidden-pitch{
        display: none;
    }
	.grid-pitches{
        display: grid;
        grid-template-columns: repeat(2,1fr);
        position: relative;
        gap: 1rem;
        max-width: fit-content;
        margin-top: 1rem;
    }
    
    .select-hand, .pitch-cell{
        list-style: none;
		display: flex;
		padding: 0.25rem;
		background-color: white;
		background-image: none;
		background-size: 400%;
		border-radius: 0.6rem;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
        justify-content: center;
    }
    .select-hand:hover,.pitch-cell:hover{
        background-color: #b6b6f9;
    }

    .active{
        background-color: #3e8e41;
    }
 
    h2 {
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}
	p {
		margin-top: 0.5rem;
		margin-bottom: 0;
		color: #444;
	}
	.button:is(:hover, :focus-within) {
		background-position: 0;
		background-image: var(--accent-gradient);
	}
	.button:is(:hover, :focus-within) h2 {
		color: rgb(var(--accent));
	}

    .dropdown {
        position: relative;
      }
      
    
</style>
