---


export interface Props {
    title: string;
    sport: string; 
}

const {title, sport} = Astro.props;
---


<div class="select-group">
    <!--<label for="button"> What {title} would you like? </label>-->
    <button class="button" id="button">
        <span id="select-label-pitch">  Please Select {title}</span>
    </button>
    
    <div id="drop-down" class="drop-down hidden-pitch">
        <label class="select-item" for="select-pitch-12">12</label>
        <input class="option-pitch" id="select-pitch-12" type="radio" name="pitch" value="pitch-12">
        <label class="select-item" for="select-pitch-2">2</label>
        <input class="option-pitch" id="select-pitch-2" type="radio" name="pitch" value="pitch-2">
        <label class="select-item" for="select-pitch-3">3</label>
        <input class="option-pitch" id="select-pitch-3" type="radio" name="pitch" value="pitch-3">
        <label class="select-item" for="select-pitch-4">4</label>
        <input class="option-pitch" id="select-pitch-4" type="radio" name="pitch" value="pitch-4">
        <label class="select-item" for="select-pitch-5">5</label>
        <input class="option-pitch" id="select-pitch-5" type="radio" name="pitch" value="pitch-5">
        <label class="select-item" for="select-pitch-6">6</label>
        <input class="option-pitch" id="select-pitch-6" type="radio" name="pitch" value="pitch-6">
        <label class="select-item" for="select-pitch-7">7</label>
        <input class="option-pitch" id="select-pitch-7" type="radio" name="pitch" value="pitch-7">
        <label class="select-item" for="select-pitch-8">8</label>
        <input class="option-pitch" id="select-pitch-8" type="radio" name="pitch" value="pitch-8">
        <label class="select-item" for="select-pitch-9">9</label>
        <input class="option-pitch" id="select-pitch-9" type="radio" name="pitch" value="pitch-9">
        <label class="select-item" for="select-pitch-10">10</label>
        <input class="option-pitch" id="select-pitch-10" type="radio" name="pitch" value="pitch-10">
    </div>
</div>

<script>
    
    const button = document.querySelector('#button')


    const select = document.querySelector('#drop-down')


    const pitchOptions = document.querySelectorAll('.option-pitch')
    
    
    const selectLabel = document.querySelector('#select-label-pitch')

    button.addEventListener('click', function(event){
        event.preventDefault()
        toggleHidden()

    })

    function toggleHidden(){
        select.classList.toggle('hidden-pitch')
    }
    
    pitchOptions.forEach(function(option){
        option.addEventListener('click',
        function(event){
            setSelectTitle(event)            
        })
    })
    function setSelectTitle(event){
        const labelElement = document.querySelector(`label[for="${event.target.id}"]`).innerText
        console.log(labelElement)
        selectLabel.innerText = labelElement;
        toggleHidden()
    }

</script>

<style>

    label{
        display: block;
        padding: 2rem 0 0.5rem;
    }
    .select-group{
        position: relative;
    }


    .option-pitch{
        display: none;
    }

    .drop-down{
        border: 2px solid #3e8e41;
        border-radius: .3rem;
        position: absolute;
        width: 100%;
        box-sizing: border-box;

    }
    .select-item{
        background-color: white;
        padding: 1rem;
        color: black;
    }
    .select-item:hover{
        background-color: #ecd2ff;
    }
    .hidden-pitch{
        display: none;
    }

    .section{
        list-style: none;
		display: flex;
		padding: 0.25rem;
		background-color: white;
		background-image: none;
		background-size: 400%;
		border-radius: 0.6rem;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
    }
 
    h2 {
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}
	p {
		margin-top: 0.5rem;
		margin-bottom: 0;
		color: #444;
	}
	.button:is(:hover, :focus-within) {
		background-position: 0;
		background-image: var(--accent-gradient);
	}
	.button:is(:hover, :focus-within) h2 {
		color: rgb(var(--accent));
	}
	
   
      /* The container <div> - needed to position the dropdown content */
    .dropdown {
        position: relative;
      }
      
    
</style>
